/*
 * Class: CMSC203 CRN 46519
 Program: Assignment 3 Design
 Instructor: Farnaz Eivazi
 Summary of Description:  Create a Java program to encrypt and decrypt a phrase using two similar approaches, each insecure by modern standards.  
	The first approach is called the Caesar Cipher and is a simple “substitution cipher” where characters in a message are replaced by a substitute character.
	The second approach, due to Giovan Battista Bellaso (b 1505, d 1581), uses a key word, where each character in the word specifies the offset for the corresponding character in the message, with the key word wrapping around as needed. 
 Due Date: 07/14/2022
 Integrity Pledge: I pledge that I have completed the programming assignment independently.
 I have not copied the code from a student or any source.
Student: Bryan Orozco

 * 
 */


//this class is in charge of encrypting/decrypting a String 
public class CryptoManager {
	
	private static final char LOWER_BOUND = 32;
	private static final char UPPER_BOUND = 95;
	private static final int RANGE = UPPER_BOUND - LOWER_BOUND + 1;

	/**
	 * This method determines if a string is within the allowable bounds of ASCII codes 
	 * according to the LOWER_BOUND and UPPER_BOUND characters
	 * @param plainText a string to be encrypted, if it is within the allowable bounds
	 * @return true if all characters are within the allowable bounds, false if any character is outside
	 */
	public static boolean stringInBounds (String plainText)	{
		//set boolean to true
		boolean flag=true;
		//loops through each character
		for(int i=0;i<plainText.length();i++)	{
			//checks if each character is NOT >= to the lower bound and <= the upper bound.
			if(!((int)plainText.charAt(i)>=LOWER_BOUND && (int)plainText.charAt(i)<=UPPER_BOUND))	{ 
				//set boolean to false
				flag=false;
				//end 
				break;
			}
		}
			//return the true boolean
		return flag;

	}

	/**
	 * Encrypts a string according to the Caesar Cipher.  The integer key specifies an offset
	 * and each character in plainText is replaced by the character \"offset\" away from it 
	 * @param plainText an uppercase string to be encrypted.
	 * @param key an integer that specifies the offset of each character
	 * @return the encrypted string
	 */
	public static String encryptCaesar(String plainText, int key)	{
		//Variable to hold String
		String encryptedText = "";

		//If statement checks if method stringInBounds is true
		if (stringInBounds(plainText))	{

			//for loop to cycle through each character
			for (int index=0; index<plainText.length(); index++)	{
				
				//create char variable to hold current character
				char thisChar = plainText.charAt(index);
				
				//create int variable to hold char turned into int plus int inputed by user
				int encryptedCharint = ((int)thisChar+key);
				 
				// to ensure that we dont surpasss the upperbound, while loop to change int
				while (encryptedCharint > UPPER_BOUND)	{
					
					//Keep int within range by subtracting range from encrypted int
					encryptedCharint -= RANGE;
				}
				//turn new int into char
				encryptedText += (char)encryptedCharint;
			}
		}
		//return char
	return encryptedText;

	}
	
	/**
	 * Encrypts a string according the Bellaso Cipher.  Each character in plainText is offset 
	 * according to the ASCII value of the corresponding character in bellasoStr, which is repeated
	 * to correspond to the length of plainText
	 * @param plainText an uppercase string to be encrypted.
	 * @param bellasoStr an uppercase string that specifies the offsets, character by character.
	 * @return the encrypted string
	 */
	public static String encryptBellaso(String plainText, String bellasoStr)	{
		//Variable to hold String
		String encryptedText = "";
		//int variable to hold key character length 
		int bellasoStrLength = bellasoStr.length();
		//for loop to be cycle through the characters of the string
		for (int index = 0; index < plainText.length(); index++)	{
			//Create char variable to hold the current char
			char thisChar = plainText.charAt(index);
			//create int to hold char turned into int plus second string turned into modified int
			int encryptedCharint = ((int)thisChar+(int)bellasoStr.charAt(index%bellasoStrLength));
			// to ensure that we dont surpasss the upperbound, while loop to change int
			while (encryptedCharint > (int)UPPER_BOUND)	{
				//Keep int within range by subtracting range from encrypted int
				encryptedCharint -= RANGE;
			}
			//variable to hold int turned back into char
			encryptedText += (char)encryptedCharint;

		}
		//return new char
		return encryptedText;

	}

	
	/**
	 * Decrypts a string according to the Caesar Cipher.  The integer key specifies an offset
	 * and each character in encryptedText is replaced by the character \"offset\" characters before it.
	 * This is the inverse of the encryptCaesar method.
	 * @param encryptedText an encrypted string to be decrypted.
	 * @param key an integer that specifies the offset of each character
	 * @return the plain text string
	 */
	public static String decryptCaesar(String encryptedText, int key)	{
		//create variable to hold string
		String decryptedText = "";
		//create loop to cycle through the characters
		for (int index =0; index < encryptedText.length(); index++)	{
			//create char variable to hold current char at index
			char thisChar = encryptedText.charAt(index);
			//create int variable to hold char turned into int minus key that was added in encrypt
			int decryptedCharint = ((int)thisChar-key);
			// if new int is below lower bound add range
			while (decryptedCharint < LOWER_BOUND)	{

				decryptedCharint += RANGE;

			}
			//turn int into char
			decryptedText += (char)decryptedCharint;

			}
		//return char
		return decryptedText;

	}
	
	/**
	 * Decrypts a string according the Bellaso Cipher.  Each character in encryptedText is replaced by
	 * the character corresponding to the character in bellasoStr, which is repeated
	 * to correspond to the length of plainText.  This is the inverse of the encryptBellaso method.
	 * @param encryptedText an uppercase string to be encrypted.
	 * @param bellasoStr an uppercase string that specifies the offsets, character by character.
	 * @return the decrypted string
	 */
	public static String decryptBellaso(String encryptedText, String bellasoStr)	{
		//create variable to hold string
		String decryptedText = "";
		//int variable to hold key character length 
		int bellasoStrLength = bellasoStr.length();
		//create loop to cycle through the characters
		for (int index = 0; index < encryptedText.length(); index ++)	{
			//Create char variable to hold the current char
			char thisChar = encryptedText.charAt(index);
			//create int to hold char turned into int minus second string turned into modified int
			int decryptedCharint = ((int)thisChar-(int)bellasoStr.charAt(index%bellasoStrLength));
			// if new int is below lower bound add range
			while (decryptedCharint < (int)LOWER_BOUND)	{

				decryptedCharint += RANGE;

			}
			//turn int into char
			decryptedText += (char)decryptedCharint;

		}
		//return char
		return decryptedText;

	}
}
